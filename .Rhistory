ggplot(data=var.pcr.df) +
geom_line(aes(x = components, y = variance)) +
gem_point()
variance.pcr = c(1:5)
for (i in 1:5) {
pcr_pred <- predict(pcr.fit, movie_pcr_test , ncomp = i);
variance.pcr[i] = mean((pcr_pred - movie_pcr_test$revenue)^2)
}
var.pcr.df = as.data.frame(cbind(variance=variance.pcr, components = c(1:5)))
#pred_act <- data.frame(cbind(pcr_pred, movie_pcr_test$revenue))
ggplot(data=var.pcr.df) +
geom_line(aes(x = components, y = variance)) +
geom_point()
variance.pcr = c(1:5)
for (i in 1:5) {
pcr_pred <- predict(pcr.fit, movie_pcr_test , ncomp = i);
variance.pcr[i] = mean((pcr_pred - movie_pcr_test$revenue)^2)
}
var.pcr.df = as.data.frame(cbind(variance=variance.pcr, components = c(1:5)))
#pred_act <- data.frame(cbind(pcr_pred, movie_pcr_test$revenue))
ggplot(data=var.pcr.df) +
geom_line(aes(x = components, y = variance)) +
geom_point(aes(x = components, y = variance))
variance.pcr = c(1:5)
for (i in 1:5) {
pcr_pred <- predict(pcr.fit, movie_pcr_test , ncomp = i);
variance.pcr[i] = mean((pcr_pred - movie_pcr_test$revenue)^2)
}
var.pcr.df = as.data.frame(cbind(variance=variance.pcr, components = c(1:5)))
#pred_act <- data.frame(cbind(pcr_pred, movie_pcr_test$revenue))
ggplot(data=var.pcr.df) +
geom_line(aes(x = components, y = variance)) +
geom_point(aes(x = components, y = variance)) +
theme_light()
pcr_lm4 <- lm(revenue ~ PC1 + PC2 , data = movie_pcr)
summary(pcr_lm4)
vif(pcr_lm4)
pcr_lm5 <- lm(revenue ~ PC1 + PC2 , data = movie_pcr.nc)
summary(pcr_lm5)
vif(pcr_lm5)
AIC(object = pcr_lm4, k = 2)
BIC(object = pcr_lm4)
AIC(object = pcr_lm5, k = 2)
BIC(object = pcr_lm5)
#str(movie)
contable1 <- table(movie$genres, movie$profitable)
chisqres1 = chisq.test(contable1)
chisqres1
contable2 <- table(movie$company, movie$profitable)
chisqres2 = chisq.test(contable2)
chisqres2
movie_scale <- as.data.frame(scale(movie_num[c(1:6)], center = TRUE, scale = TRUE)) # scale all numeric variables
movie_scale$genres = movie$genres # append back the other columns
movie_scale$company = movie$company
movie_scale$y = movie$profitable
#we have only 1 movie with genre as foreign, causing an error when predicting model on test data, so we remove it
movie_scale <- subset(movie_scale, !(movie_scale$genres == "Foreign"))
movie_scale$genres <- as.factor(as.character(movie_scale$genres)) # reasign the factor levels
# split the train and test sets with ratio 50:50
set.seed(1)
movie_sample1 <- sample(2, nrow(movie_scale), replace=TRUE, prob=c(0.50, 0.50))
# create train and test sets
train2 <- movie_scale[movie_sample1==1, 1:9]
test2 <- movie_scale[movie_sample1==2, 1:9]
#drop revenue
loadPkg("bestglm")
res.bestglm <- bestglm(Xy = train2[-c(1)], family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
#summary(res.bestglm)
res.bestglm$BestModels
#summary(res.bestglm$BestModels)
#drop budget
res.bestglm1 <- bestglm(Xy = train2[-c(2)], family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
#summary(res.bestglm1)
res.bestglm1$BestModels
#summary(res.bestglm1$BestModels)
loadPkg("bestglm")
res.bestglm0 <- bestglm(Xy = train2, family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
#summary(res.bestglm)
res.bestglm0$BestModels
#drop revenue
res.bestglm <- bestglm(Xy = train2[-c(1)], family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
#summary(res.bestglm)
res.bestglm$BestModels
#summary(res.bestglm$BestModels)
#drop budget
res.bestglm1 <- bestglm(Xy = train2[-c(2)], family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
#summary(res.bestglm1)
res.bestglm1$BestModels
#summary(res.bestglm1$BestModels)
prf_glm <- glm(y ~ genres + revenue + score + runtime, data = train2[-c(2)], family = "binomial")
summary(prf_glm)
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
prof_Hos = hoslem.test(test2$y, fitted(prf_glm)) # Hosmer and Lemeshow test, a chi-squared test
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
prof_Hos = hoslem.test(train2$y, fitted(prf_glm)) # Hosmer and Lemeshow test, a chi-squared test
prf_Hos
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
prf_Hos = hoslem.test(train2$y, fitted(prf_glm)) # Hosmer and Lemeshow test, a chi-squared test
prf_Hos
#glm_pred <- predict(object = prf_glm, test2)
#actual_pred_glm <- as.data.frame(cbind(actuals = test2$y, predicts = glm_pred))
loadPkg("pROC")
prob_glm = predict(object = prf_glm, train2, type = c("response")) # predict the model on train set
h <- roc(y~prob_glm, data=train2)
auc(h) # area-under-curve prefer 0.8 or higher.
plot(h)
title("Training")
prob_glm_test = predict(object = prf_glm, test2, type = c("response")) # predict the model on test set
h_test <- roc(y~prob_glm_test, data=test2)
auc(h_test) # area-under-curve prefer 0.8 or higher.
plot(h_test)
title("Testing")
prf_glm1 <- glm(y ~ budget + company + score + vote, data = train2[-c(1)], family = "binomial")
summary(prf_glm1)
loadPkg("pscl") # use pR2( ) function to calculate McFadden statistics for model eval
prf_mcFadden = pR2(prf_glm)
prf_mcFadden
View(movie_scale)
#drop revenue
res.bestglm <- bestglm(Xy = movie_scale, family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
#summary(res.bestglm)
res.bestglm$BestModels
#summary(res.bestglm$BestModels)
#drop budget
res.bestglm1 <- bestglm(Xy = train2[-c(2)], family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
#summary(res.bestglm1)
res.bestglm1$BestModels
#summary(res.bestglm1$BestModels)
#drop revenue
res.bestglm <- bestglm(Xy = movie_scale[-c(1)], family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
#summary(res.bestglm)
res.bestglm$BestModels
#summary(res.bestglm$BestModels)
#drop budget
res.bestglm1 <- bestglm(Xy = train2[-c(2)], family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
#summary(res.bestglm1)
res.bestglm1$BestModels
#summary(res.bestglm1$BestModels)
loadPkg("bestglm")
res.bestglm0 <- bestglm(Xy = movie_scale, family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
#summary(res.bestglm)
res.bestglm0$BestModels
movie_scale <- as.data.frame(scale(movie_num[c(1:6)], center = TRUE, scale = TRUE)) # scale all numeric variables
movie_scale$genres = movie$genres # append back the other columns
movie_scale$company = movie$company
movie_scale$y = movie$profitable
#we have only 1 movie with genre as foreign, causing an error when predicting model on test data, so we remove it
#movie_scale <- subset(movie_scale, !(movie_scale$genres == "Foreign"))
movie_scale$genres <- as.factor(as.character(movie_scale$genres)) # reasign the factor levels
# split the train and test sets with ratio 50:50
#set.seed(1)
#movie_sample1 <- sample(2, nrow(movie_scale), replace=TRUE, prob=c(0.50, 0.50))
# create train and test sets
#train2 <- movie_scale[movie_sample1==1, 1:9]
#test2 <- movie_scale[movie_sample1==2, 1:9]
loadPkg("bestglm")
res.bestglm0 <- bestglm(Xy = movie_scale, family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
#summary(res.bestglm)
res.bestglm0$BestModels
#drop revenue
res.bestglm <- bestglm(Xy = movie_scale[-c(1)], family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
#summary(res.bestglm)
res.bestglm$BestModels
#summary(res.bestglm$BestModels)
#drop budget
res.bestglm1 <- bestglm(Xy = movie_scale[-c(2)], family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
#summary(res.bestglm1)
res.bestglm1$BestModels
#summary(res.bestglm1$BestModels)
prf_glm <- glm(y ~ genres + revenue + score + runtime, data = movie_scale[-c(2)], family = "binomial")
summary(prf_glm)
prf_glm <- glm(y ~ ., data = movie_scale[-c(1)], family = "binomial")
summary(prf_glm)
exp(coef(prf_glm))
#drop revenue
res.bestglm <- bestglm(Xy = movie_scale[-c(1)], family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
#summary(res.bestglm)
res.bestglm$BestModels
#summary(res.bestglm$BestModels)
prf_glm0 <- glm(y ~ budget + popularity + score + vote + genres + company., data = movie_scale[-c(1)], family = "binomial")
prf_glm0 <- glm(y ~ budget + popularity + score + vote + genres + company, data = movie_scale[-c(1)], family = "binomial")
summary(prf_glm0)
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
prf_Hos = hoslem.test(movie_scale$y, fitted(prf_glm)) # Hosmer and Lemeshow test, a chi-squared test
prf_Hos
prf_Hos0 = hoslem.test(movie_scale$y, fitted(prf_glm0)) # Hosmer and Lemeshow test, a chi-squared test
prf_Hos0
loadPkg("pROC")
prob_glm = predict(object = prf_glm, movie_scale[-c(1)], type = c("response")) # predict the model on train set
h <- roc(y~prob_glm, data=tmovie_scale[-c(1)])
loadPkg("pROC")
prob_glm = predict(object = prf_glm, movie_scale[-c(1)], type = c("response")) # predict the model on train set
h <- roc(y~prob_glm, data=movie_scale[-c(1)])
auc(h) # area-under-curve prefer 0.8 or higher.
plot(h)
title("Model with runtime")
prob_glm_test = predict(object = prf_glm0, movie_scale[-c(1)], type = c("response")) # predict the model on test set
h0 <- roc(y~prob_glm0, data=movie_scale[-c(1)])
loadPkg("pROC")
prob_glm = predict(object = prf_glm, movie_scale[-c(1)], type = c("response")) # predict the model on train set
h <- roc(y~prob_glm, data=movie_scale[-c(1)])
auc(h) # area-under-curve prefer 0.8 or higher.
plot(h)
title("Model with runtime")
prob_glm0 = predict(object = prf_glm0, movie_scale[-c(1)], type = c("response")) # predict the model on test set
h0 <- roc(y~prob_glm0, data=movie_scale[-c(1)])
auc(h0) # area-under-curve prefer 0.8 or higher.
plot(h0)
title("Model without runtime")
loadPkg("pscl") # use pR2( ) function to calculate McFadden statistics for model eval
prf_mcFadden = pR2(prf_glm)
prf_mcFadden
prf_mcFadden0 = pR2(prf_glm0)
prf_mcFadden0
prf_glm1 <- glm(y ~., data = train2[-c(2)], family = "binomial")
summary(prf_glm1)
loadPkg("corrplot")
movie_num <- subset(movie, select = c(6,1,3,7,9,10))
movie_num_all <- data.frame(cbind(movie_num,profit=movie$profit))
cordf =  cor(movie_num_all)
corrplot(cordf)
#drop budget
res.bestglm1 <- bestglm(Xy = movie_scale[-c(2)], family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
#summary(res.bestglm)
res.bestglm1$BestModels
#summary(res.bestglm$BestModels)
prf_glm1 <- glm(y ~., data = movie_scale[-c(2)], family = "binomial")
summary(prf_glm1)
prf_mcFadden1 = pR2(prf_glm1)
prf_mcFadden1
prf_glm1 <- glm(y ~ budget + popularity + score + vote + genres + runtime, data = movie_scale[-c(2)], family = "binomial")
prf_glm1 <- glm(y ~ revenue + popularity + score + vote + genres + runtime, data = movie_scale[-c(2)], family = "binomial")
summary(prf_glm1)
prf_mcFadden1 = pR2(prf_glm1)
prf_mcFadden1
prob_glm1 = predict(object = prf_glm1, movie_scale[-c(2)], type = c("response")) # predict the model on train set
h1 <- roc(y~prob_glm1, data=movie_scale[-c(2)])
auc(h1) # area-under-curve prefer 0.8 or higher.
plot(h1)
prf_glm1 <- glm(y ~ revenue + popularity + score + vote + genres + runtime + company, data = movie_scale[-c(2)], family = "binomial")
summary(prf_glm1)
prf_mcFadden1 = pR2(prf_glm1)
prf_mcFadden1
prob_glm1 = predict(object = prf_glm1, movie_scale[-c(2)], type = c("response")) # predict the model on train set
h1 <- roc(y~prob_glm1, data=movie_scale[-c(2)])
auc(h1) # area-under-curve prefer 0.8 or higher.
plot(h1)
View(movie)
company_list = unique(movie$company)
company_list = unique(movie$company)
profit_prob = c(1:6)
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
profit_prob[i] = round(nrow(subset1)*100/nrow(movie), digits =2)
}
company_list = unique(movie$company)
profit_prob = c(1:6)
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
profit_prob[i] = round(nrow(subset1)*100/nrow(movie), digits =2)
}
profit_prob
company_list = unique(movie$company)
profit_prob = c()
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
append(profit_prob, round(nrow(subset1)*100/nrow(movie), digits =2))
}
profit_prob
company_list = unique(movie$company)
profit_prob = ( )
company_list = unique(movie$company)
profit_prob = c( )
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
append(profit_prob, round(nrow(subset1)*100/nrow(movie), digits =2))
}
profit_prob
company_list = unique(movie$company)
profit_prob <- vector(mode="float", length=6)
company_list = unique(movie$company)
profit_prob <- vector(mode="double", length=6)
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
append(profit_prob, round(nrow(subset1)*100/nrow(movie), digits =2))
}
profit_prob
company_list = unique(movie$company)
profit_prob <- vector(mode="double", length=6)
j=1
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
profit_prob[j] = round(nrow(subset1)*100/nrow(movie), digits =2)
j = j+1
}
profit_prob
company_list = unique(movie$company)
profit_prob <- vector(mode="double", length=6)
j=1
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
subset <- subset(movie, movie$company ==i)
profit_prob[j] = round(nrow(subset1)*100/nrow(subset), digits =2)
j = j+1
}
profit_prob
company_list = unique(movie$company)
profit_prob <- vector(mode="double", length=6)
j=1
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
subset <- subset(movie, movie$company ==i)
profit_prob[j] = round(nrow(subset1)*100/nrow(subset), digits =2)
j = j+1
}
probprf_company <- as.data.frame(ProfitProb = profit_prob, company = company_list)
company_list = unique(movie$company)
profit_prob <- vector(mode="double", length=6)
j=1
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
subset <- subset(movie, movie$company ==i)
profit_prob[j] = round(nrow(subset1)*100/nrow(subset), digits =2)
j = j+1
}
probprf_company <- as.data.frame(cbind(ProfitProb = profit_prob, company = company_list))
probprf_company
company_list = unique(movie$company)
profit_prob <- vector(mode="double", length=6)
j=1
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
subset <- subset(movie, movie$company ==i)
profit_prob[j] = round(nrow(subset1)*100/nrow(subset), digits =2)
j = j+1
}
probprf_company <- as.data.frame(cbind(ProfitProb = profit_prob, company = company_list))
probprf_company
company_list = unique(movie$company)
profit_prob <- vector(mode="double", length=6)
j=1
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
subset <- subset(movie, movie$company ==i)
profit_prob[i] = round(nrow(subset1)*100/nrow(subset), digits =2)
j = j+1
}
#probprf_company <- as.data.frame(cbind(ProfitProb = profit_prob, company = company_list))
profit_prob
company_list
company_list = unique(movie$company)
profit_prob <- vector(mode="double", length=6)
j=1
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
subset <- subset(movie, movie$company ==i)
profit_prob[i] = round(nrow(subset1)*100/nrow(subset), digits =2)
j = j+1
}
probprf_company <- as.data.frame(cbind(ProfitProb = profit_prob, company = as.character(company_list)))
#profit_prob
probprf_company
company_list = unique(movie$company)
profit_prob <- vector(mode="double", length=6)
j=1
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
subset <- subset(movie, movie$company ==i)
profit_prob[i] = round(nrow(subset1)*100/nrow(subset), digits =2)
j = j+1
}
probprf_company <- as.data.frame(cbind(ProfitProb = profit_prob, company = as.factor(as.character(company_list))))
#profit_prob
probprf_company
company_list = unique(movie$company)
profit_prob <- vector(mode="double", length=6)
j=1
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
subset <- subset(movie, movie$company ==i)
profit_prob[i] = round(nrow(subset1)*100/nrow(subset), digits =2)
j = j+1
}
probprf_company <- as.data.frame(cbind(ProfitProb = profit_prob, company = company_list))
#profit_prob
probprf_company
company_list = unique(movie$company)
profit_prob <- vector(mode="double", length=6)
j=1
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
subset <- subset(movie, movie$company ==i)
profit_prob[j] = round(nrow(subset1)*100/nrow(subset), digits =2)
j = j+1
}
probprf_company <- as.data.frame(cbind(ProfitProb = profit_prob, company = company_list))
#profit_prob
probprf_company
company_list = unique(movie$company)
profit_prob <- vector(mode="double", length=6)
j=1
for (i in company_list) {
subset1 <- subset(movie, (movie$company == i) & (movie$profitable == 1))
subset <- subset(movie, movie$company ==i)
profit_prob[j] = round(nrow(subset1)*100/nrow(subset), digits =2)
j = j+1
}
probprf_company <- as.data.frame(cbind(ProfitProb = profit_prob, company = as.character(company_list)))
#profit_prob
probprf_company
probprf_company
exp(coef(prf_glm))
probprf_company
table(exp(coef(prf_glm)))
probprf_company
exp(coef(prf_glm)
probprf_company
exp(coef(prf_glm))
exp(coef(prf_glm))
probprf_company
exp(coef(prf_glm0))
exp(coef(prf_glm0))
exp(coef(prf_glm1))
probprf_company
exp(coef(prf_glm))
probprf_company
company_list
exp(coef(prf_glm))
probprf_company
company_list
#exp(coef(prf_glm))
View(prf_glm)
probprf_company
company_list
exp(coef(prf_glm))[c(24:29)]
probprf_company
#company_list
exp(coef(prf_glm))[c(24:29)]
probprf_company
#company_list
exp(coef(prf_glm))[c(25:29)]
probprf_company
#company_list
table(exp(coef(prf_glm))[c(25:29)])
load("knitr")
loadPkg("knitr")
probprf_company
#company_list
kable(exp(coef(prf_glm))[c(25:29)])
loadPkg("knitr")
probprf_company
#company_list
kable(exp(coef(prf_glm))[c(25:29)], caption = "Logit coefficients of company")
#loadPkg("knitr")
probprf_company
#company_list
exp(coef(prf_glm))[c(25:29)]
#loadPkg("knitr")
probprf_company
#company_list
summary(exp(coef(prf_glm))[c(25:29)])
#loadPkg("knitr")
probprf_company
#company_list
print(exp(coef(prf_glm))[c(25:29)])
#loadPkg("knitr")
probprf_company
#company_list
str(exp(coef(prf_glm))[c(25:29)])
#loadPkg("knitr")
probprf_company
#company_list
lapply(exp(coef(prf_glm))[c(25:29)])
#loadPkg("knitr")
probprf_company
#company_list
lapply(exp(coef(prf_glm))[c(25:29)], head)
loadPkg("corrplot")
movie_num <- subset(movie, select = c(6,1,3,7,9,10))
movie_num_all <- data.frame(cbind(movie_num,profit=movie$profit))
cordf =  cor(movie_num_all)
corrplot(cordf)
